{"version":3,"sources":["services/themoviedb-api.js","views/ErrorView/ErrorView.js","views/ErrorView/ErrorView.module.css","components/SearchBar/SearchBar.module.css","views/GalleryView/GalleryView.module.css","views/FilmStatusView/FilmStatusView.module.css","components/SearchBar/SearchBar.js","views/GalleryView/GalleryView.js","views/FilmStatusView/FilmStatusView.js","views/MoviesView/MoviesView.js"],"names":["BASE_URL","API_KEY","POSTER_URL","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchMoviesByName","name","fetchMovieDetails","id","fetchMovieCast","fetchMovieReviews","ErrorView","message","className","s","module","exports","Searchbar","onSubmit","useState","filmName","setFilmName","searchbar","searchForm","event","preventDefault","value","onChange","currentTarget","toLowerCase","searchFormInput","type","autoComplete","autoFocus","placeholder","searchFormButton","GalleryView","films","useRouteMatch","list","map","film","item","to","link","image","src","poster_path","alt","title","width","height","Status","FilmsStatusView","queryURL","error","setError","status","setStatus","setFilms","fetchFilms","then","newFilms","total_results","results","catch","err","useEffect","PendingView","MoviesView","history","useHistory","location","useLocation","URLSearchParams","search","get","query","push"],"mappings":"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","file":"static/js/MoviesView.df0d7582.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1a4768bd62313a9ba272b58353515c76';\n\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n    const response = await fetch(url, config);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not Found'));\n}\n\nexport function fetchTrendingMovies() {\n    return fetchWithErrorHandling(\n        `${BASE_URL}/trending/movie/week?api_key=${API_KEY}`,\n    );\n}\n\nexport function fetchMoviesByName(name) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${name}&language=en-US&page=1&include_adult=false`,\n    );\n}\n\nexport function fetchMovieDetails(id) {\n    return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`,\n  );\n}\n\nexport function fetchMovieCast(id) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`,\n    );\n}\n\nexport function fetchMovieReviews(id) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`,\n    );\n}","import PropTypes from 'prop-types';\nimport s from './ErrorView.module.css';\n\nexport default function ErrorView({ message }) {\n    return (\n        <div>\n            <p className={s.message}>Sorry, no matches found. Error:{message}</p>\n        </div>\n    );\n}\n\nErrorView.propTypes = {\n    message: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"ErrorView_message__3aRQF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar\":\"SearchBar_searchbar__3KMEO\",\"searchForm\":\"SearchBar_searchForm__bTf69\",\"searchFormButton\":\"SearchBar_searchFormButton__2Xv3t\",\"searchFormButtonLabel\":\"SearchBar_searchFormButtonLabel__8tnfn\",\"searchFormInput\":\"SearchBar_searchFormInput__7SWYX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"GalleryView_list__1YfL-\",\"item\":\"GalleryView_item__1OpgH\",\"link\":\"GalleryView_link__2JH4D\",\"image\":\"GalleryView_image__36sbx\",\"title\":\"GalleryView_title__SCM1I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"FilmStatusView_message__25jl3\"};","import { ImSearch } from 'react-icons/im';\nimport { useState } from 'react';\n\nimport PropTypes from 'prop-types';\nimport s from './SearchBar.module.css';\n\nexport default function Searchbar({ onSubmit }) {\n  const [filmName, setFilmName] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(filmName);\n    setFilmName('');\n  };\n\n  return (\n    <div className={s.searchbar}>\n      <form className={s.searchForm} onSubmit={handleSubmit}>\n        <input\n          value={filmName}\n          onChange={event =>\n            setFilmName(event.currentTarget.value.toLowerCase())\n          }\n          className={s.searchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search films\"\n        />\n        <button type=\"submit\" className={s.searchFormButton}>\n          <ImSearch />\n        </button>\n      </form>\n    </div>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n","import { Link, useRouteMatch } from 'react-router-dom';\nimport { POSTER_URL } from '../../services/themoviedb-api';\nimport s from './GalleryView.module.css';\n\nexport default function GalleryView({ films }) {\n  const { url } = useRouteMatch();\n\n  return (\n    <ul className={s.list}>\n      {films.map(film => (\n            <li key={film.id} className={s.item}>\n              <Link to={`${url}/${film.id}`} className={s.link}>\n                <img\n                  className={s.image}\n                  src={POSTER_URL + film.poster_path}\n                  alt={film.title}\n                  width=\"300\"\n                  height=\"450\"\n                />\n                <p className='{s.title}'>{film.title}</p>\n              </Link>\n            </li>\n      ))}\n    </ul>\n  );\n}\n\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchMoviesByName } from '../../services/themoviedb-api';\nimport ErrorView from '../ErrorView/ErrorView';\nimport PendingView from '../PendingView/PendingView';\nimport GalleryView from '../GalleryView/GalleryView';\nimport s from './FilmStatusView.module.css';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nexport default function FilmsStatusView({ filmName, queryURL }) {\n  const [error, setError] = useState({});\n  const [status, setStatus] = useState(Status.IDLE);\n  const [films, setFilms] = useState([]);\n\n  const fetchFilms = name => {\n    fetchMoviesByName(name)\n      .then(newFilms => {\n        if (newFilms.total_results > 0) {\n          setFilms(newFilms.results);\n          setStatus(Status.RESOLVED);\n        } else return Promise.reject(new Error('Invalid request'));\n      })\n      .catch(err => {\n        setError(err);\n        setStatus(Status.REJECTED);\n      });\n  };\n\n  useEffect(() => {\n    if (filmName === '' && queryURL !== null) {\n      fetchFilms(queryURL);\n      return;\n    }\n    if (filmName) {\n      fetchFilms(filmName);\n    }\n  }, [filmName, queryURL]);\n\n  if (status === Status.IDLE) {\n    return <p className={s.message}>Please enter your search term</p>;\n  }\n\n  if (status === Status.PENDING) {\n    return <PendingView />;\n  }\n\n  if (status === Status.REJECTED) {\n    return <ErrorView message={error.message} />;\n  }\n\n  if (status === Status.RESOLVED) {\n    return (\n      <>\n        <GalleryView films={films} />\n      </>\n    );\n  }\n}\n\nFilmsStatusView.propTypes = {\n  filmName: PropTypes.string.isRequired,\n  queryURL: PropTypes.string,\n};\n","import { useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Searchbar from '../../components/SearchBar/SearchBar';\nimport FilmsStatusView from '../FilmStatusView/FilmStatusView';\n\nexport default function MoviesView() {\n  const history = useHistory();\n  const location = useLocation();\n  const [filmName, setFilmName] = useState('');\n  const [films, setFilms] = useState([]);\n\n  const queryURL = new URLSearchParams(location.search).get('query');\n\n  const onQueryChange = query => {\n    history.push({ ...location, search: `query=${query}` });\n  };\n\n  const onSubmit = name => {\n    setFilmName(name);\n    setFilms([]);\n    onQueryChange(name);\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={onSubmit} />\n      <FilmsStatusView filmName={filmName} queryURL={queryURL} />\n    </>\n  );\n}"],"sourceRoot":""}